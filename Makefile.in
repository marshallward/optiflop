SRC=src
INC=inc
OBJDIR=obj

CC=@CC@
CFLAGS=@DEFS@ @CFLAGS@ -Wall -I$(INC)

# Optional flags
LOOP_CFLAGS=@loop_cflags@

LD=@CC@
LDFLAGS=@LIBS@

# Paths to platform-specific source
POSIX_TIMER_PATH=$(SRC)/@posix_timer_path@
TSC_TIMER_PATH=$(SRC)/@tsc_timer_path@
SSE_PATH=$(SRC)/@sse_path@
SSE_FMA_PATH=$(SRC)/@sse_fma_path@
AVX_PATH=$(SRC)/@avx_path@
AVX_FMA_PATH=$(SRC)/@avx_fma_path@
AVX512_PATH=$(SRC)/@avx512_path@

# Object files
# TODO: Generate this list
# TODO: Include GPU object file
_OBJS=main.o input.o \
	stopwatch.o stopwatch_posix.o stopwatch_tsc.o \
	simd.o \
	sse.o sse_fma.o \
	avx.o avx_fma.o \
	avx512.o \
	roof.o kernel.o dummy.o

OBJS=$(addprefix $(OBJDIR)/, $(_OBJS))

all: LOOP=-funroll-loops --param max-unroll-times=2
all: optiflop

# Platforms

# NOTE: Using -mavx in place of -march=corei7-avx (or native) shows some minor
# changes in performance, on the order of 10 to 100 MFLOP/s.  In general, -mavx
# is slightly faster across the tests, although y[:] = x[:] + y[:] is slighly
# faster when -mavx is removed.
#
# The reason for this is still not clear.  Please experiment on your platform.

# Below are the old platform-specific rules.
# I am working on getting autoconf to sort out these details
fcc: CC=fccpx -Xg -I$(INC)
fcc: CFLAGS=-std=gnu99 -Kfast
fcc: optiflop

# TODO: Integrate this with autoconf
gpu: CC=gcc -std=gnu99 -g -I$(INC)
gpu: CFLAGS=-mavx -O3 -fno-builtin
gpu: LOOP=-funroll-loops --param max-unroll-times=2
gpu: CXX=g++
gpu: gpuflop

# Executable rules

gpuflop: $(OBJS) $(OBJDIR)/gpu_roof.o
	nvcc $(LDFLAGS) -o $@ $^

optiflop: $(OBJS) $(OBJDIR)/gpu_roof_null.o
	$(CC) -pthread -o $@ $^ $(LDFLAGS)

$(OBJS): | $(OBJDIR)

$(OBJDIR):
	mkdir -p $(OBJDIR)

# Object rules

$(OBJDIR)/main.o: $(SRC)/main.c $(INC)/sse.h $(INC)/sse_fma.h $(INC)/avx.h $(INC)/avx_fma.h $(INC)/roof.h $(INC)/bench.h
	$(CC) $(CFLAGS) -c -pthread -o $@ $<

$(OBJDIR)/input.o: $(SRC)/input.c $(INC)/input.h
	$(CC) $(CFLAGS) -c -pthread -o $@ $<

$(OBJDIR)/simd.o: $(SRC)/simd.c $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/sse.o: $(SSE_PATH)/sse.c $(INC)/sse.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/sse_fma.o: $(SSE_FMA_PATH)/sse_fma.c $(INC)/sse_fma.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/avx.o: $(AVX_PATH)/avx.c $(INC)/avx.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/avx_fma.o: $(AVX_FMA_PATH)/avx_fma.c $(INC)/avx_fma.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/avx512.o: $(AVX512_PATH)/avx512.c $(INC)/avx512.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/roof.o: $(SRC)/roof.c $(INC)/roof.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) $(LOOP_CFLAGS) -c -o $@ $<

$(OBJDIR)/kernel.o: $(SRC)/kernel.c $(INC)/roof.h $(INC)/bench.h $(INC)/stopwatch.h
	$(CC) $(CFLAGS) $(LOOP_CFLAGS) -c -o $@ $<

$(OBJDIR)/dummy.o: $(SRC)/dummy.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/stopwatch.o: $(SRC)/stopwatch.c $(INC)/stopwatch.h
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/stopwatch_posix.o: $(POSIX_TIMER_PATH)/stopwatch_posix.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/stopwatch_tsc.o: $(TSC_TIMER_PATH)/stopwatch_tsc.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/gpu_roof_null.o: $(SRC)/generic/gpu_roof.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/gpu_roof.o: $(SRC)/cuda/gpu_roof.cu
	nvcc -I$(INC) -c -o $@ $<


clean:
	$(RM) optiflop gpuflop $(OBJDIR)/*.o $(INC)/*.h.gch
	$(RM) -r $(OBJDIR)


# Delete any files associated with configuration (including the Makefile).
.PHONY: distclean
distclean: clean
	$(RM) inc/config.h
	$(RM) config.log
	$(RM) config.status
	$(RM) Makefile


# This deletes all files generated by autoconf, including configure.
# It is more aggressive than automake's maintainer-clean.
# NOTE: Not a standard GNU target, this is for internal use only.
#   Don't be surprised if the name changes or if it disappears someday.
.PHONY: ac-clean
ac-clean: distclean
	$(RM) inc/config.h.in
	$(RM) aclocal.m4
	$(RM) -r autom4te.cache
	$(RM) configure
